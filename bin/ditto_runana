#!/bin/bash

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";
$DIR/ditto_setup_check QUIET; if [ $? -eq 1 ]; then exit; fi

ERROR=echo
MSG=echo
SUCCESS=echo
if [ -d "$HOME/login" ]; then
  LOGINEXISTS=true;
  source ~/login/bash/utils.sh
  ERROR=e_error
  MSG=e_msg
  SUCCESS=e_success
fi

usage() {
  $MSG "Usage:"
  echo ""
  echo "      sh $(basename $0) OPTIONSTRINGS ..."
  echo
  echo "Options with arguments:"
  echo "  -h    Help                           (Display this message)"
  echo "  -t    job tag                        (e.g. -j default=test)"
  echo "  -d    path to samples dir            (e.g. -d /hadoop/cms/store/user/phchang/AutoTwopler_babies/merged/general/v0.0.2/)"
  echo "  -e    comma separated exclude filter (e.g. -e \"ht\")"
  echo "  -q    comma separated require filter (e.g. -q \"www\")"
  echo "  -N    N number of events to restrict (e.g. -N 1000000)"
  echo "  -l    Job list                       (e.g. -l joblist.txt)"
  echo "Options without arguments:"
  echo "  -c    Condor submit"
  echo "  -f    Force run even if tagged output exists"
  echo "  -s    Suppress log output"
  echo "  -k    run skimmed version"
  echo
  exit
}

# Command-line opts
while getopts ":t:q:e:N:d:l:hfsck" OPTION; do
  case $OPTION in
    t) JOBTAG=${OPTARG};;
    d) SAMPLESDIRPATH=${OPTARG};;
    e) EXCLUDEPATTERNSSTR=${OPTARG};;
    q) REQUIREPATTERNSSTR=${OPTARG};;
    l) JOBLISTTXTFILEPATH=${OPTARG};;
    N) NEVENTSTOPROCESS=${OPTARG};;
    f) FORCERUN=true;;
    c) CONDORSUBMIT=true;;
    s) SUPPRESSLOG=true;;
    k) USESKIMMED=true;;
    h) usage;;
    :) usage;;
  esac
done

if [ -z ${SAMPLESDIRPATH} ]; then usage; fi

# Shift away option strings
shift $(($OPTIND - 1))

# unflatten exclude pattern separated by commas
EXCLUDEPATTERNS=(${EXCLUDEPATTERNSSTR//,/ })
REQUIREPATTERNS=(${REQUIREPATTERNSSTR//,/ })

if [ -z ${JOBTAG} ]; then JOBTAG=test; fi
if [ -z ${SUPPRESSLOG} ]; then SUPPRESSLOG=false; fi
if [ "$USESKIMMED" == "true" ]; then SAMPLESDIRPATH=${JOBTAG}/output/; fi

# Verbose
date
echo "================================================"
echo "$(basename $0) $*"
echo "------------------------------------------------"
echo "JOBTAG             : ${JOBTAG}"
echo "SAMPLESDIRPATH     : ${SAMPLESDIRPATH}"
echo "EXCLUDEPATTERNSSTR : ${EXCLUDEPATTERNSSTR}"
echo "REQUIREPATTERNSSTR : ${REQUIREPATTERNSSTR}"
echo "JOBLISTTXTFILEPATH : ${JOBLISTTXTFILEPATH}"
echo "NEVENTSTOPROCESS   : ${NEVENTSTOPROCESS}"
echo "USESKIMMED         : ${USESKIMMED}"
echo "================================================"

# Unless the jobtag contains the word "tag" check whether the job has already been run
if [[ "$JOBTAG" == *"test"* ]]; then
  : # move on
else
  # If condor do different check
  # Check whether the directory exists
  if [ "${CONDORSUBMIT}" == "true" ]; then
    if [ -d /nfs-7/userdata/phchang/ditto_skimmed_babies/log/${ANALYSIS}_$JOBTAG ]; then
      if [ "${FORCERUN}" == true ]; then
        :
      else
        $ERROR "Did you already ran with this -t $JOBTAG?"
        $ERROR "If not delete /nfs-7/userdata/phchang/ditto_skimmed_babies/log/${ANALYSIS}_$JOBTAG before running again."
        exit
      fi
    fi
  else
    if [ -d $JOBTAG ]; then
      if [ "${FORCERUN}" == true ]; then
        :
      else
        $ERROR "The output directory $JOBTAG/ already exists!"
        $ERROR "Did you already ran with this -t $JOBTAG?"
        $ERROR "If not delete $JOBTAG/ before running again."
        exit
      fi
    fi
  fi

fi

$MSG "Checking repository status to tag current code..."
pushd $PACKAGEPATH
STATUS=$(git status)
if [[ ${STATUS} == *"nothing to commit, working directory clean"* ]]; then
  :
else
  echo ${STATUS}
  echo "NEEDS COMMIT"
  git commit -a -m msg
  git push
  PACKAGEVERSION=$(git rev-parse HEAD)
fi
cd $DITTOPATH
STATUS=$(git status)
if [[ ${STATUS} == *"nothing to commit, working directory clean"* ]]; then
  :
else
  echo ${STATUS}
  echo "NEEDS COMMIT"
  git commit -a -m msg
  git push
  DITTOVERSION=$(git rev-parse HEAD)
fi
popd

$MSG "Listing samples in SAMPLESDIRPATH=$SAMPLESDIRPATH"
ls -lhB --color=auto $SAMPLESDIRPATH

echo ""
echo ""
echo ""
$MSG "Checking against exclude pattern string (if one was provided) and writing the command lines to /tmp/ditto_runana_jobs.txt"

# Setting directory name
OUTPUTDIRNAME=output
LOGDIRNAME=log

# If condor suppress log should be set to true
if [ "${CONDORSUBMIT}" == "true" ]; then
  SUPPRESSLOG=true
  JOBTAG=${JOBTAG}
  OUTPUTDIRNAME=.
  LOGDIRNAME=.
fi

# Clearing whatever is already in ditto_runana_jobs.txt
rm -f /tmp/ditto_runana_jobs.txt

# Main loop over the samples
for SAMPLE in $(ls $SAMPLESDIRPATH); do

  # Check it has .root
  if [[ $SAMPLE != *".root"* ]]; then continue; fi

  if [ "$USESKIMMED" == "true" ]; then
    if [[ $SAMPLE != *"skimtree.root"* ]]; then continue; fi
  fi

  # Loop over exclude pattern to check whether I need to to exclud the sample
  EXCLUDE=false
  for EXCLUDEPATTERN in "${EXCLUDEPATTERNS[@]}"; do
    if [[ $SAMPLE == *"${EXCLUDEPATTERN}"* ]]; then EXCLUDE=true; fi
  done

  # If the sample is to be excluded, continue.
  if $EXCLUDE; then continue; fi

  # Loop over exclude pattern to check whether I need to to exclud the sample
  REQUIRE=false
  for REQUIREPATTERN in "${REQUIREPATTERNS[@]}"; do
    if [[ $SAMPLE == *"${REQUIREPATTERN}"* ]]; then REQUIRE=true; fi
  done

  if [ -z ${REQUIREPATTERNSSTR} ]; then
    :
  else
    if [ "$REQUIRE" == "false"  ]; then
      continue;
    fi
  fi

  # Loop over job list txt file content to check whether this job is to be run over
  if [ "x${JOBLISTTXTFILEPATH}" == "x" ]; then
    :
  else
    INJOBLIST=false
    while read -r LINE
    do
      if [[ $SAMPLE == *"${LINE}"* ]]; then INJOBLIST=true; fi
    done < ${JOBLISTTXTFILEPATH}
    if [ "${INJOBLIST}" == "false" ]; then
      continue;
    fi
  fi

  # Now we can add the job to the /tmp/ditto_runana_jobs.txt
  if [ "$SUPPRESSLOG" == "false" ]; then
    echo "ditto_ana_${PACKAGENAME} $SAMPLESDIRPATH/$SAMPLE ${JOBTAG}/${OUTPUTDIRNAME}/${SAMPLE//.root} ${NEVENTSTOPROCESS} &> ${JOBTAG}/${LOGDIRNAME}/${SAMPLE//.root}.log" >> /tmp/ditto_runana_jobs.txt
  else
    echo "ditto_ana_${PACKAGENAME} $SAMPLESDIRPATH/$SAMPLE ${JOBTAG}/${OUTPUTDIRNAME}/${SAMPLE//.root} ${NEVENTSTOPROCESS} 2>&1 | tee ${JOBTAG}/${LOGDIRNAME}/${SAMPLE//.root}.log" >> /tmp/ditto_runana_jobs.txt
  fi

done

if [ "${CONDORSUBMIT}" == "true" ]; then
  $MSG "Submitting condor jobs..."
  CONDORJOBCOUNTER=0
  #cat /tmp/ditto_runana_jobs.txt | while read LINE
  while read -r LINE
  do

    ITEMS=($LINE)
    ANALYSIS=${ITEMS[0]//ditto_ana_}
    HADOOPDIR=${ITEMS[1]}
    SAMPLEFILENAME=${ITEMS[2]//${JOBTAG}\/.\/}
    NEVENTS=${ITEMS[3]//2>&1}
    CONDORJOBNAME=${ANALYSIS}_${SAMPLEFILENAME}

    $MSG ==============================================
    $MSG ANALYSIS=${ANALYSIS}
    $MSG HADOOPDIR=${HADOOPDIR}
    $MSG SAMPLEFILENAME=${SAMPLEFILENAME}
    $MSG JOBTAG=${JOBTAG}
    $MSG NEVENTS=${NEVENTS}
    $MSG CONDORJOBNAME=${CONDORJOBNAME}
    $MSG condor_err=/nfs-7/userdata/phchang/ditto_skimmed_babies/log/${ANALYSIS}_${JOBTAG}/${SAMPLEFILENAME}.err
    $MSG condor_log=/nfs-7/userdata/phchang/ditto_skimmed_babies/log/${ANALYSIS}_${JOBTAG}/${SAMPLEFILENAME}.log
    $MSG condor_out=/nfs-7/userdata/phchang/ditto_skimmed_babies/log/${ANALYSIS}_${JOBTAG}/${SAMPLEFILENAME}.out
    $MSG OUTPUTHISTLOCATION=/hadoop/cms/store/user/phchang/ditto_output/${ANALYSIS}_${JOBTAG}/${SAMPLEFILENAME//_skimtree}_hist.root
    $MSG OUTPUTROOTLOCATION=/hadoop/cms/store/user/phchang/ditto_output/${ANALYSIS}_${JOBTAG}/${SAMPLEFILENAME}_skimtree.root
    # Cleaning up the condor log/err/out area
    mkdir -p /nfs-7/userdata/phchang/ditto_skimmed_babies/log/${ANALYSIS}_${JOBTAG}/
    mkdir -p /tmp/phchang/
    rm -f /nfs-7/userdata/phchang/ditto_skimmed_babies/log/${ANALYSIS}_${JOBTAG}/${SAMPLEFILENAME}.*
    echo "ditto git $DITTOVERSION" >> /nfs-7/userdata/phchang/ditto_skimmed_babies/log/${ANALYSIS}_${JOBTAG}/gitversion
    echo "ditto git $PACKAGEVERSION" >> /nfs-7/userdata/phchang/ditto_skimmed_babies/log/${ANALYSIS}_${JOBTAG}/gitversion

    # Creating condor submit command
    cp $DITTOPATH/condor/submit_template.cmd /tmp/phchang/temp.cmd
    sed "s/ANALYSIS/${ANALYSIS}/"                              /tmp/phchang/temp.cmd  > /tmp/phchang/temp1.cmd
    sed "s~HADOOPDIR~${HADOOPDIR}~"                            /tmp/phchang/temp1.cmd > /tmp/phchang/temp2.cmd
    sed "s/SAMPLEFILENAME/${SAMPLEFILENAME}/"                  /tmp/phchang/temp2.cmd > /tmp/phchang/temp3.cmd
    sed "s/JOBTAG/${JOBTAG}/"                                  /tmp/phchang/temp3.cmd > /tmp/phchang/temp4.cmd
    sed "s/NEVENTS/${NEVENTS}/"                                /tmp/phchang/temp4.cmd > /tmp/phchang/temp5.cmd
    sed "s~DITTOPATH~${DITTOPATH}~"                            /tmp/phchang/temp5.cmd > /tmp/phchang/temp6.cmd
    sed "s~INPUTFILES~${DITTOPATH}/bin/ditto_ana_${ANALYSIS}~" /tmp/phchang/temp6.cmd > /tmp/phchang/${CONDORJOBNAME}.cmd

    # Submitting the job
    $MSG "Submitting "${CONDORJOBNAME}
    $MSG "condor.cmd="/tmp/phchang/${CONDORJOBNAME}.cmd
    $MSG "----------------------------------------------"
    condor_submit /tmp/phchang/${CONDORJOBNAME}.cmd

    # Counter up!
    export CONDORJOBCOUNTER=$((CONDORJOBCOUNTER+1))

    $MSG ==============================================
  done < /tmp/ditto_runana_jobs.txt
  $MSG "Submitted all N=$CONDORJOBCOUNTER condor jobs!"
  exit
fi

$MSG "Creating ${JOBTAG}output/ and ${JOBTAG}log/ in the local area, if it hasn't been done so."
mkdir -p ${JOBTAG}/output/ ${JOBTAG}/log/
echo "ditto git $DITTOVERSION" >> ${JOBTAG}/gitversion
echo "ditto git $PACKAGEVERSION" >> ${JOBTAG}/gitversion

if [ -z ${COREPATH} ]; then
  :
else
  ln -sf $COREPATH CORE
  ln -sf $COREPATH MVAinput
fi

$MSG "Submitting xargs jobs via ditto_xargs"
$DITTOPATH/bin/ditto_xargs /tmp/ditto_runana_jobs.txt

if [ -z ${COREPATH} ]; then
  :
else
  rm CORE MVAinput
fi

