#!/bin/bash

##############################################################################
#
#
# Ditto automatic plot dumper
#
#
##############################################################################

EOSCOMMAND="/afs/cern.ch/project/eos/installation/0.2.31/bin/eos.select"
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Help
usage()
{
  echo "ERROR - Usage:"
  echo
  echo "      sh $(basename $0) OPTIONSTRINGS ..."
  echo
  echo "Options with arguments:"
  echo "  -h    Help                   (Display this message)"
  echo "  -v    Var histogram name     (e.g. -v nlep)"
  echo "  -d    output directory       (e.g. -d plots/)"
  echo "  -p    Plot options           (e.g. -p plot1d)"
  echo "  -o    Plot output prefix     (e.g. -o Prefix)"
  echo "  -L    Luminosity             (e.g. -L Prefix)"
  echo "  -e    Extra plot option      (e.g. -e '--autostack')"
  echo "  -f    Filter pattern         (e.g. -f '10.root')"
  echo "  -S    Signal scale           (e.g. -S '*100' # must provide '*')"
  echo "  -i    Input directory path   (e.g. -i haddoutput/)"
  echo "Options without arguments:"
  echo "  -V    verbose"
  echo "  -D    Delete and plot"
  echo "  -s    Shape comparison"
  echo
  exit
}

too_many_entries()
{
  echo "ERROR - Too many to plot! (more than 7) I do not recommend putting more than 7 items on a plot!"
  echo ""
  echo "Asked for following root files to be plotted"
  for item in $(ls ${INPUTDIR}/hist*root); do
    echo $item
  done
  echo ""
  echo ""
  exit
}

# Command-line opts
while getopts ":d:e:L:v:p:o:f:S:i:hDsV" OPTION; do
  case $OPTION in
    d) OUTPUTDIR=${OPTARG};;
    e) EXTRAOPTION=${OPTARG};;
    v) VAR=${OPTARG};;
    p) PLOTOPTION=${OPTARG};;
    o) OUTPUTPREFIX=${OPTARG};;
    L) LUMISCALE=${OPTARG};;
    f) FILTERPATTERN=${OPTARG};;
    S) SIGSCALE=${OPTARG};;
    i) INPUTDIR=${OPTARG};;
    D) DELETEANDPLOT="TRUE";;
    s) SHAPECOMPARISON="TRUE";;
    V) VERBOSE="TRUE";;
    h) usage;;
    :) usage;;
  esac
done

# argument = plot dir
# hist files naming scheme (e.g, hist_bkg_name.root, hist_sig_name.root)
# hist files pretty name in histogram title?
# options to exclude pattern (multiple? comma separated?)
# options to include pattern (multiple? comma separated?)

if [ -z ${PLOTOPTION} ]; then PLOTOPTION=plot1d; fi
if [ -z ${OUTPUTPREFIX}  ]; then OUTPUTPREFIX=""; fi
if [ -z ${OUTPUTDIR} ]; then OUTPUTDIR=plots; fi

if [ -z ${INPUTDIR} ]; then usage; fi

shift $(($OPTIND - 1))

# Verbose
date
echo "================================================"
echo "$(basename $0) $*"
echo "------------------------------------------------"
echo "VAR            : ${VAR}"
echo "PLOTOPTION     : ${PLOTOPTION}"
echo "OUTPUTPREFIX   : ${OUTPUTPREFIX}"
echo "EXTRAOPTION    : ${EXTRAOPTION}"
echo "================================================"

#
#
# function
#
#

# check if it's a number
function is_number() {
  re='^[0-9]+$'
  if [[ $1 =~ $re ]]; then echo 1; else echo 0; fi
}

# extract a string
# grep -Po '13TeV.\K[^.]+' <<<'....string...'
#           ^^^^^^    ^
#           keyword   to next .
# http://askubuntu.com/questions/697120/extract-word-from-string-using-grep-sed-awk

# $ echo "a b c d e" | tr ' ' '\n' | tail -1
# e

BKGCOLORARRAY=(7001 7002 7003 7004 7005 7006 7007)
SIGCOLORARRAY=(1 2 4 8 9 6 7)

echo "" > /tmp/plotjobs.txt

REFFILE=""
for item in $(ls ${INPUTDIR}/hist*root); do
  ITEMNAME=$(basename $item)
  CATEGORY=$(grep -Po 'hist_\K[^_]+' <<<${ITEMNAME})
  NAME=$(grep -Po $CATEGORY'_\K[^_]+' <<<${ITEMNAME})
  COLORINDEX=$(grep -Po $NAME'_\K[^.]+' <<<${ITEMNAME})
  if [[ ${item} != *"${FILTERPATTERN}"* ]]; then continue; fi
  if [ "x${CATEGORY}" == "xsig" ]; then
    if [ "x${COLORINDEX}" == "x1" ]; then
      REFFILE=$item; break;
    fi
  fi
done

if [ -z ${REFFILE} ]; then
  for item in $(ls ${INPUTDIR}/hist*root); do
  CATEGORY=$(grep -Po 'hist_\K[^_]+' <<<$item)
  if [[ ${item} != *"${FILTERPATTERN}"* ]]; then continue; fi
  if [ "x${CATEGORY}" == "xbkg" ]; then REFFILE=$item; break; fi
done
fi

# create plots directory if needed
mkdir -p ${OUTPUTDIR}/log
cd ${OUTPUTDIR}/
ln -sf ~/syncfiles/miscfiles/index.php
if [ "x${DELETEANDPLOT}" == "xTRUE" ]; then rm *pdf *png *csv; fi
cd -

for vars in $(root -l -b -q $DIR/../macros/print_th1s.C\(\"$REFFILE\"\) | grep TH | awk '{print $3}'); do

  THISVAR=${vars//;1}

  if [ "x${VAR}" != "x" ]; then
    if [[ ${THISVAR} != *"${VAR}"* ]]; then
      continue
    fi
  fi

  SIGCOUNTER=0
  BKGCOUNTER=0
  PROCESSSTRING="  "
  for item in $(ls ${INPUTDIR}/hist*root); do
    SCALE=${LUMISCALE}
    if [[ ${item} != *"${FILTERPATTERN}"* ]]; then continue; fi
    ITEMNAME=$(basename $item)
    CATEGORY=$(grep -Po 'hist_\K[^_]+' <<<${ITEMNAME})
    NAME=$(grep -Po $CATEGORY'_\K[^_]+' <<<${ITEMNAME})
    COLORINDEX=$(grep -Po $NAME'_\K[^.]+' <<<${ITEMNAME})
    if [ "x${CATEGORY}" == "xbkg" ]; then LEGENDSTYLE=f; fi
    if [ "x${CATEGORY}" == "xsig" ]; then LEGENDSTYLE=l; fi
    if [ "x${CATEGORY}" == "xbkg" ]; then BKGCOUNTER=$((BKGCOUNTER+1)); fi
    if [ "x${CATEGORY}" == "xsig" ]; then SIGCOUNTER=$((SIGCOUNTER+1)); fi
    #if [ "x${CATEGORY}" == "xbkg" ]; then COLOR=${BKGCOLORARRAY[${BKGCOUNTER}]}; fi
    #if [ "x${CATEGORY}" == "xsig" ]; then COLOR=${SIGCOLORARRAY[${SIGCOUNTER}]}; fi
    if [ "x${CATEGORY}" == "xbkg" ]; then COLOR=${BKGCOLORARRAY[${COLORINDEX}]}; fi
    if [ "x${CATEGORY}" == "xsig" ]; then COLOR=${SIGCOLORARRAY[${COLORINDEX}]}; fi
    if [ "${BKGCOUNTER}" -ge "7" ]; then too_many_entries; fi
    if [ "${SIGCOUNTER}" -ge "7" ]; then too_many_entries; fi
    if [ -z ${PRETTYNAME} ]; then PRETTYNAME=${NAME}; fi
    if [ -z ${SCALE} ]; then SCALE=70; fi
    if [[ ${THISVAR} == *"rawcutflow"* ]]; then SCALE=1; fi
    if [[ ${THISVAR} == *"rawcounter"* ]]; then SCALE=1; fi
    if [ "x${SHAPECOMPARISON}" == "xTRUE" ]; then SCALE="norm1"; fi
    TOTALCOUNTER=$((${BKGCOUNTER}+${SIGCOUNTER}))
    #echo $CATEGORY $NAME $COLOR ${PRETTYNAME} ${SCALE}
    if [ "x${CATEGORY}" == "xbkg" ]; then PROCESSSTRING=$PROCESSSTRING"  --${CATEGORY}hist \'${item}:::${THISVAR}:::SetFillColor=>${COLOR},SetLineWidth=>0,SetName=>${NAME}%${LEGENDSTYLE},Scale=>${SCALE}\'"; fi
#	    if [ "x${CATEGORY}" == "xsig" ]; then PROCESSSTRING=$PROCESSSTRING"  --${CATEGORY}hist \'${item}:::${THISVAR}:::SetLineColor=>${COLOR},SetLineWidth=>4,SetName=>${NAME}%${LEGENDSTYLE},Scale=>${SIGSCALE}\'"; fi
    if [ "x${CATEGORY}" == "xsig" ]; then PROCESSSTRING=$PROCESSSTRING"  --${CATEGORY}hist \'${item}:::${THISVAR}:::SetLineColor=>${COLOR},SetLineWidth=>4,SetName=>${NAME}%${LEGENDSTYLE},Scale=>${SCALE}${SIGSCALE}\'"; fi
  done

  # if no bkg, then add a sig to bkg
  if [ "x${BKGCOUNTER}" == "x0" ]; then
    SCALE=${LUMISCALE}
    for item in $(ls ${INPUTDIR}/hist*root); do
      if [[ ${item} != *"${FILTERPATTERN}"* ]]; then continue; fi
      CATEGORY=$(grep -Po 'hist_\K[^_]+' <<<$item)
      NAME=$(grep -Po $CATEGORY'_\K[^_]+' <<<$item)
      COLORINDEX=$(grep -Po $NAME'_\K[^.]+' <<<$item)
      if [ "x${CATEGORY}" == "xbkg" ]; then LEGENDSTYLE=f; fi
      if [ "x${CATEGORY}" == "xsig" ]; then LEGENDSTYLE=l; fi
      if [ "x${CATEGORY}" == "xbkg" ]; then BKGCOUNTER=$((BKGCOUNTER+1)); fi
      if [ "x${CATEGORY}" == "xsig" ]; then SIGCOUNTER=$((SIGCOUNTER+1)); fi
      #if [ "x${CATEGORY}" == "xbkg" ]; then COLOR=${BKGCOLORARRAY[${BKGCOUNTER}]}; fi
      #if [ "x${CATEGORY}" == "xsig" ]; then COLOR=${SIGCOLORARRAY[${SIGCOUNTER}]}; fi
      if [ "x${CATEGORY}" == "xbkg" ]; then COLOR=${BKGCOLORARRAY[${COLORINDEX}]}; fi
      if [ "x${CATEGORY}" == "xsig" ]; then COLOR=${SIGCOLORARRAY[${COLORINDEX}]}; fi
      if [ "${BKGCOUNTER}" -ge "7" ]; then too_many_entries; fi
      if [ "${SIGCOUNTER}" -ge "7" ]; then too_many_entries; fi
      if [ -z ${PRETTYNAME} ]; then PRETTYNAME=${NAME}; fi
      if [ -z ${SCALE} ]; then SCALE=70; fi
      if [[ ${THISVAR} == *"rawcutflow"* ]]; then SCALE=1; fi
      if [[ ${THISVAR} == *"rawcounter"* ]]; then SCALE=1; fi
      if [ "x${SHAPECOMPARISON}" == "xTRUE" ]; then SCALE="norm1"; fi
      TOTALCOUNTER=$((${BKGCOUNTER}+${SIGCOUNTER}))
      CATEGORY=bkg
      PROCESSSTRING=$PROCESSSTRING"  --${CATEGORY}hist \'${item}:::${THISVAR}:::SetLineColor=>${COLOR},SetLineWidth=>4,SetName=>${NAME}%${LEGENDSTYLE},Scale=>${SCALE}\'"
      break
    done
  fi

  if [ "x${VERBOSE}" == "xTRUE" ]; then
    echo python $DITTOPATH/python/makeplot.py \
      --plottype ${PLOTOPTION} \
      --plotname ${OUTPUTDIR}/${OUTPUTPREFIX}${THISVAR} \
      $PROCESSSTRING \
      ${EXTRAOPTION} >> /tmp/plotjobs.txt
  else
    echo "python $DITTOPATH/python/makeplot.py \
      --plottype ${PLOTOPTION} \
      --plotname ${OUTPUTDIR}/${OUTPUTPREFIX}${THISVAR} \
      $PROCESSSTRING \
      ${EXTRAOPTION} &> ${OUTPUTDIR}/log/${OUTPUTPREFIX}${THISVAR}.log" >> /tmp/plotjobs.txt
  fi

done

ditto_xargs /tmp/plotjobs.txt

PLOTPATH=$(echo $('cd' $(dirname ${OUTPUTDIR}); pwd)/$(basename ${OUTPUTDIR}))
echo http://uaf-7.t2.ucsd.edu/~${USER}/${PLOTPATH//\/home\/users\/phchang\/public_html\/}

#eof
